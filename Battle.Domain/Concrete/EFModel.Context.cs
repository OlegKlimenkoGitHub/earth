//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Battle.Domain.Concrete
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Army> Armies { get; set; }
        public virtual DbSet<Battlemech> Battlemechs { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Design> Designs { get; set; }
        public virtual DbSet<Gamer> Gamers { get; set; }
        public virtual DbSet<Manufacture> Manufactures { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<CountryInit> CountryInits { get; set; }
        public virtual DbSet<Ev> Evs { get; set; }
    
        public virtual ObjectResult<GetColors_Result> GetColors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetColors_Result>("GetColors");
        }
    
        public virtual ObjectResult<GetCountryProperties_Result> GetCountryProperties(string cod)
        {
            var codParameter = cod != null ?
                new ObjectParameter("cod", cod) :
                new ObjectParameter("cod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryProperties_Result>("GetCountryProperties", codParameter);
        }
    
        public virtual ObjectResult<GetUserColors_Result> GetUserColors(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserColors_Result>("GetUserColors", userIdParameter);
        }
    
        public virtual int ClearUserTables(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearUserTables", userIdParameter);
        }
    
        public virtual int IncreaseMinerals(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncreaseMinerals", userIdParameter);
        }
    
        public virtual ObjectResult<Country> GetCompCountries(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Country>("GetCompCountries", userIdParameter);
        }
    
        public virtual ObjectResult<Country> GetCompCountries(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Country>("GetCompCountries", mergeOption, userIdParameter);
        }
    
        public virtual ObjectResult<Country> GetAllCountries(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Country>("GetAllCountries", userIdParameter);
        }
    
        public virtual ObjectResult<Country> GetAllCountries(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Country>("GetAllCountries", mergeOption, userIdParameter);
        }
    
        public virtual ObjectResult<Army> GetArmiesInCountry(Nullable<int> userId, Nullable<int> countryRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Army>("GetArmiesInCountry", userIdParameter, countryRidParameter);
        }
    
        public virtual ObjectResult<Army> GetArmiesInCountry(Nullable<int> userId, Nullable<int> countryRid, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Army>("GetArmiesInCountry", mergeOption, userIdParameter, countryRidParameter);
        }
    
        public virtual ObjectResult<Battlemech> GetMechsInArmy(Nullable<int> userId, Nullable<int> armyRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var armyRidParameter = armyRid.HasValue ?
                new ObjectParameter("ArmyRid", armyRid) :
                new ObjectParameter("ArmyRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Battlemech>("GetMechsInArmy", userIdParameter, armyRidParameter);
        }
    
        public virtual ObjectResult<Battlemech> GetMechsInArmy(Nullable<int> userId, Nullable<int> armyRid, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var armyRidParameter = armyRid.HasValue ?
                new ObjectParameter("ArmyRid", armyRid) :
                new ObjectParameter("ArmyRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Battlemech>("GetMechsInArmy", mergeOption, userIdParameter, armyRidParameter);
        }
    
        public virtual ObjectResult<Country> GetCountryById(Nullable<int> userId, Nullable<int> countryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Country>("GetCountryById", userIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<Country> GetCountryById(Nullable<int> userId, Nullable<int> countryId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Country>("GetCountryById", mergeOption, userIdParameter, countryIdParameter);
        }
    
        public virtual int MoveMechs(Nullable<int> userId, Nullable<int> armyFromRid, Nullable<int> armyToRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var armyFromRidParameter = armyFromRid.HasValue ?
                new ObjectParameter("ArmyFromRid", armyFromRid) :
                new ObjectParameter("ArmyFromRid", typeof(int));
    
            var armyToRidParameter = armyToRid.HasValue ?
                new ObjectParameter("ArmyToRid", armyToRid) :
                new ObjectParameter("ArmyToRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveMechs", userIdParameter, armyFromRidParameter, armyToRidParameter);
        }
    
        public virtual ObjectResult<Army> GetArmyInCountryForGamer(Nullable<int> userId, Nullable<int> countryRid, Nullable<int> gamerRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            var gamerRidParameter = gamerRid.HasValue ?
                new ObjectParameter("GamerRid", gamerRid) :
                new ObjectParameter("GamerRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Army>("GetArmyInCountryForGamer", userIdParameter, countryRidParameter, gamerRidParameter);
        }
    
        public virtual ObjectResult<Army> GetArmyInCountryForGamer(Nullable<int> userId, Nullable<int> countryRid, Nullable<int> gamerRid, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            var gamerRidParameter = gamerRid.HasValue ?
                new ObjectParameter("GamerRid", gamerRid) :
                new ObjectParameter("GamerRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Army>("GetArmyInCountryForGamer", mergeOption, userIdParameter, countryRidParameter, gamerRidParameter);
        }
    
        public virtual ObjectResult<Gamer> GetGamerByRid(Nullable<int> userId, Nullable<int> gamerRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var gamerRidParameter = gamerRid.HasValue ?
                new ObjectParameter("GamerRid", gamerRid) :
                new ObjectParameter("GamerRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gamer>("GetGamerByRid", userIdParameter, gamerRidParameter);
        }
    
        public virtual ObjectResult<Gamer> GetGamerByRid(Nullable<int> userId, Nullable<int> gamerRid, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var gamerRidParameter = gamerRid.HasValue ?
                new ObjectParameter("GamerRid", gamerRid) :
                new ObjectParameter("GamerRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gamer>("GetGamerByRid", mergeOption, userIdParameter, gamerRidParameter);
        }
    
        public virtual ObjectResult<Army> GetReadyArmiesInCountry(Nullable<int> userId, Nullable<int> countryRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Army>("GetReadyArmiesInCountry", userIdParameter, countryRidParameter);
        }
    
        public virtual ObjectResult<Army> GetReadyArmiesInCountry(Nullable<int> userId, Nullable<int> countryRid, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Army>("GetReadyArmiesInCountry", mergeOption, userIdParameter, countryRidParameter);
        }
    
        public virtual int ClearUsersEvents(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearUsersEvents", userIdParameter);
        }
    
        public virtual ObjectResult<Ev> GetReportForCountry(Nullable<int> userId, Nullable<int> countryRid)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ev>("GetReportForCountry", userIdParameter, countryRidParameter);
        }
    
        public virtual ObjectResult<Ev> GetReportForCountry(Nullable<int> userId, Nullable<int> countryRid, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var countryRidParameter = countryRid.HasValue ?
                new ObjectParameter("CountryRid", countryRid) :
                new ObjectParameter("CountryRid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ev>("GetReportForCountry", mergeOption, userIdParameter, countryRidParameter);
        }
    }
}
